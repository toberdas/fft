[gd_scene load_steps=17 format=2]

[ext_resource path="res://scenes/maingame/camera/Camera.gd" type="Script" id=1]
[ext_resource path="res://scenes/maingame/camera/CamMount.gd" type="Script" id=2]
[ext_resource path="res://env_test.tres" type="Environment" id=3]
[ext_resource path="res://scenes/maingame/camera/SkySprite.gd" type="Script" id=4]
[ext_resource path="res://scenes/helper/SeaCheckComponent.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/environments/CloudyEnvironment.tres" type="Environment" id=6]
[ext_resource path="res://assets/resources/elemental/sky/CurrentSkyResource.tres" type="Resource" id=8]
[ext_resource path="res://assets/materials/mat_abovewater_screen.tres" type="Material" id=9]
[ext_resource path="res://assets/materials/mat_underwater_screen.tres" type="Material" id=10]

[sub_resource type="QuadMesh" id=8]
size = Vector2( 2, 2 )

[sub_resource type="ShaderMaterial" id=9]

[sub_resource type="SphereShape" id=1]
radius = 0.3

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

// USING https://www.shadertoy.com/view/XtBXDw (base on it)

uniform float iTime;
uniform int iFrame;
uniform sampler2D iChannel0;
uniform float COVERAGE :hint_range(0,1); //0.5
uniform float THICKNESS :hint_range(0,100); //25.
uniform float ABSORPTION :hint_range(0,10); //1.030725
uniform int STEPS :hint_range(0,100); //25
uniform vec4 SKYCOLORBRIGHTEST : hint_color;
uniform vec4 SKYCOLORDARKEST : hint_color;
uniform vec4 SUNCOLOR : hint_color;
uniform vec4 CLOUDCOLOR : hint_color;

float noise( in vec3 x )
{
    x*=0.01;
	float  z = x.z*256.0;
	vec2 offz = vec2(0.317,0.123);
	vec2 uv1 = x.xy + offz*floor(z); 
	vec2 uv2 = uv1  + offz;
	return mix(textureLod( iChannel0, uv1 ,0.0).x,textureLod( iChannel0, uv2 ,0.0).x,fract(z));
}

float fbm(vec3 pos,float lacunarity){
	vec3 p = pos;
	float
	t  = 0.51749673 * noise(p); p *= lacunarity;
	t += 0.25584929 * noise(p); p *= lacunarity;
	t += 0.12527603 * noise(p); p *= lacunarity;
	t += 0.06255931 * noise(p);
	return t;
}

float get_noise(vec3 x)
{
	float FBM_FREQ=2.76434;
	return fbm(x, FBM_FREQ);
}

vec3 render_sky_color(vec3 rd){
	vec3 sun_color = SUNCOLOR.rgb;
	vec3 SUN_DIR = normalize(vec3(0, abs(sin( .3)), -1));
	float sun_amount = max(dot(rd, SUN_DIR), 0.0);

	vec3  sky = mix(SKYCOLORBRIGHTEST.rgb, SKYCOLORDARKEST.rgb, 1.0 - rd.y);
	sky = sky + sun_color * min(pow(sun_amount, 1500.0) * 5.0, 1.0);
	sky = sky + sun_color * min(pow(sun_amount, 10.0) * .6, 1.0);

	return sky;
}

bool SphereIntersect(vec3 SpPos, float SpRad, vec3 ro, vec3 rd, out float t, out vec3 norm) {
    ro -= SpPos;
    
    float A = dot(rd, rd);
    float B = 2.0*dot(ro, rd);
    float C = dot(ro, ro)-SpRad*SpRad;
    float D = B*B-4.0*A*C;
    if (D < 0.0) return false;
    
    D = sqrt(D);
    A *= 2.0;
    float t1 = (-B+D)/A;
    float t2 = (-B-D)/A;
    if (t1 < 0.0) t1 = t2;
    if (t2 < 0.0) t2 = t1;
    t1 = min(t1, t2);
    if (t1 < 0.0) return false;
    norm = ro+t1*rd;
    t = t1;
    //norm = normalize(norm);
    return true;
}

float density(vec3 pos,vec3 offset,float t){
	vec3 p = pos * .0212242 + offset;
	float dens = get_noise(p);
	
	float cov = 1. - COVERAGE;
	dens *= smoothstep (cov, cov + .05, dens);
	return clamp(dens, 0., 1.);	
}


vec4 render_clouds(vec3 ro,vec3 rd){
	
	vec3 apos=vec3(0, -450, 0);
	float arad=500.;
	vec3 WIND=vec3(0, 0, -iTime * .2);
    vec3 C = vec3(0, 0, 0);
	float alpha = 0.;
    vec3 n;
    float tt;
    if(SphereIntersect(apos,arad,ro,rd,tt,n)){
        float thickness = THICKNESS;
        int steps = STEPS;
        float march_step = thickness / float(steps);
        vec3 dir_step = rd / rd.y * march_step;
        vec3 pos =n;
        float T = 1.;
        
        for (int i = 0; i < steps; i++) {
            float h = float(i) / float(steps);
            float dens = density (pos, WIND, h);
            float T_i = exp(-ABSORPTION * dens * march_step);
            T *= T_i;
            if (T < .01) break;
            C += T * (exp(h) / 1.75) *dens * march_step;
            alpha += (1. - T_i) * (1. - alpha);
            pos += dir_step;
            if (length(pos) > 1e3) break;
        }
        
        return vec4(C, alpha);
    }
    return vec4(C, alpha);
}

float fbm2(in vec3 p)
{
	float f = 0.;
	f += .50000 * noise(.5 * (p+vec3(0.,0.,-iTime*0.275)));
	f += .25000 * noise(1. * (p+vec3(0.,0.,-iTime*0.275)));
	f += .12500 * noise(2. * (p+vec3(0.,0.,-iTime*0.275)));
	f += .06250 * noise(4. * (p+vec3(0.,0.,-iTime*0.275)));
	return f;
}

vec3 cube_bot(vec3 d, vec3 c1, vec3 c2)
{
	return fbm2(d) * mix(c1, c2, d * .5 + .5);
}

vec3 rotate_y(vec3 v, float angle)
{
	float ca = cos(angle); float sa = sin(angle);
	return v*mat3(
		vec3(+ca, +.0, -sa),
		vec3(+.0,+1.0, +.0),
		vec3(+sa, +.0, +ca));
}

vec3 rotate_x(vec3 v, float angle)
{
	float ca = cos(angle); float sa = sin(angle);
	return v*mat3(
		vec3(+1.0, +.0, +.0),
		vec3(+.0, +ca, -sa),
		vec3(+.0, +sa, +ca));
}

void panorama_uv(vec2 fragCoord, out vec3 ro,out vec3 rd, in vec2 iResolution){
    float M_PI = 3.1415926535;
    float ymul = 2.0; float ydiff = -1.0;
    vec2 uv = fragCoord.xy / iResolution.xy;
    uv.x = 2.0 * uv.x - 1.0;
    uv.y = ymul * uv.y + ydiff;
    ro = vec3(0., 5., 0.);
    rd = normalize(rotate_y(rotate_x(vec3(0.0, 0.0, 1.0),-uv.y*M_PI/2.0),-uv.x*M_PI));
}

void mainImage( out vec4 fragColor, in vec2 fragCoord, in vec2 iResolution)
{
    vec3 ro = vec3 (0.,0.,0.);
	vec3 rd = vec3(0.);
    vec3 col=vec3(0.);

    panorama_uv(fragCoord,ro,rd,iResolution);
    
    vec3 sky = render_sky_color(rd);
    vec4 cld = vec4(0.);
	float skyPow = dot(rd, vec3(0.0, -1.0, 0.0));
    float horizonPow =1.-pow(1.0-abs(skyPow), 5.0);
    if(rd.y>0.)
    {cld=render_clouds(ro,rd);
    cld=clamp(cld,vec4(0.),vec4(1.));
    cld.rgb+=0.04*cld.rgb*horizonPow;
    cld*=clamp((  1.0 - exp(-2.3 * pow(max((0.0), horizonPow), (2.6)))),0.,1.);
    }
	else{
    cld.rgb = cube_bot(rd,vec3(1.5,1.49,1.71), vec3(1.1,1.15,1.5));
    cld*=cld;
    //cld=clamp(cld,vec4(0.),vec4(1.));
    cld.a=1.;
    cld*=clamp((  1.0 - exp(-1.3 * pow(max((0.0), horizonPow), (2.6)))),0.,1.);
    }
    col=mix(sky, cld.rgb/(0.0001+cld.a), cld.a);
	//col*=col;
    fragColor = vec4(col,1.0);
}

void fragment(){
	vec2 iResolution=1./TEXTURE_PIXEL_SIZE;
	mainImage(COLOR,UV*iResolution,iResolution);
}
"

[sub_resource type="OpenSimplexNoise" id=5]
period = 0.1

[sub_resource type="NoiseTexture" id=6]
noise = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/iTime = 0.0
shader_param/iFrame = 0
shader_param/COVERAGE = 0.497
shader_param/THICKNESS = 10.0
shader_param/ABSORPTION = 1.0
shader_param/STEPS = 25
shader_param/SKYCOLORBRIGHTEST = Color( 0.631373, 0.870588, 1, 1 )
shader_param/SKYCOLORDARKEST = Color( 0.0392157, 0.27451, 0.45098, 1 )
shader_param/SUNCOLOR = Color( 0.0352941, 1, 0.164706, 1 )
shader_param/CLOUDCOLOR = null
shader_param/iChannel0 = SubResource( 6 )

[sub_resource type="ImageTexture" id=7]
flags = 15
flags = 15
size = Vector2( 1280, 720 )

[node name="CamMount" type="Spatial"]
script = ExtResource( 2 )
target = NodePath("../ThirdPersonGetup")
aboveWaterEnvironment = ExtResource( 6 )
underwaterMaterial = ExtResource( 10 )
abovewaterMaterial = ExtResource( 9 )

[node name="Camera" type="ClippedCamera" parent="."]
environment = ExtResource( 3 )
current = true
far = 1500.0
margin = 0.53
script = ExtResource( 1 )
mount = NodePath("..")

[node name="MeshInstance" type="MeshInstance" parent="Camera"]
extra_cull_margin = 16384.0
mesh = SubResource( 8 )
material/0 = SubResource( 9 )

[node name="Area" type="Area" parent="."]
collision_layer = 1024
collision_mask = 0
monitoring = false

[node name="CollisionShape" type="CollisionShape" parent="Area"]
shape = SubResource( 1 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 1280, 720 )
transparent_bg = true
hdr = false
render_target_update_mode = 3

[node name="SkySprite" type="Sprite" parent="Viewport"]
material = SubResource( 3 )
texture = SubResource( 7 )
centered = false
script = ExtResource( 4 )
skyResource = ExtResource( 8 )

[node name="SeaCheckComponent" parent="." instance=ExtResource( 5 )]

[connection signal="emerged" from="SeaCheckComponent" to="." method="_on_SeaCheckComponent_emerged"]
[connection signal="submerged" from="SeaCheckComponent" to="." method="_on_SeaCheckComponent_submerged"]
