[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

uniform float time_scale = 0.8;
uniform float wave = 6.0;
uniform float fish_length = 50.0;
uniform float world_wave_length = 300.0;
uniform float world_wave_amp = 8.0;
uniform float world_wave_time_scale = .6;
uniform float time;
uniform float up = 1.0;
uniform sampler2D wave_noise;
uniform sampler2D world_wave_noise;

uniform float proximity_fade_distance;
uniform float distance_fade_min;
uniform float distance_fade_max;
render_mode blend_mix,cull_back,depth_draw_opaque,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform sampler2D texture_noise;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

const float PI = 3.14159265;
//
//void fragment() {
//	vec2 base_uv = UV;
//	vec4 albedo_tex = texture(texture_albedo,base_uv);
//	ALBEDO = albedo.rgb * albedo_tex.rgb;
//	METALLIC = metallic;
//	ROUGHNESS = roughness;
//	SPECULAR = specular;
//	NORMALMAP = texture(texture_normal,base_uv + TIME * 0.05 + (cos(TIME * world_wave_time_scale/ PI)) * .05).rgb;
//	NORMALMAP_DEPTH = normal_scale;
//	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
//	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
//	world_pos.xyz/=world_pos.w;
//	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
//	{
//		float fade_distance=-VERTEX.z;
//		float fade=clamp(smoothstep(distance_fade_min,distance_fade_max,fade_distance),0.0,1.0);
//		int x = int(FRAGCOORD.x) % 4;
//		int y = int(FRAGCOORD.y) % 4;
//		int index = x + y * 4;
//		float limit = 0.0;
//
//		if (x < 8) {
//			if (index == 0) limit = 0.0625;
//			if (index == 1) limit = 0.5625;
//			if (index == 2) limit = 0.1875;
//			if (index == 3) limit = 0.6875;
//			if (index == 4) limit = 0.8125;
//			if (index == 5) limit = 0.3125;
//			if (index == 6) limit = 0.9375;
//			if (index == 7) limit = 0.4375;
//			if (index == 8) limit = 0.25;
//			if (index == 9) limit = 0.75;
//			if (index == 10) limit = 0.125;
//			if (index == 11) limit = 0.625;
//			if (index == 12) limit = 1.0;
//			if (index == 13) limit = 0.5;
//			if (index == 14) limit = 0.875;
//			if (index == 15) limit = 0.375;
//		}
//
//	if (fade < limit)
//		discard;
//	}
//}


void vertex(){
//	float _time = time * time_scale;
//	float _time = TIME * time_scale;

	float bodyz = (VERTEX.z + fish_length * 0.5) * (1.0 / fish_length);
	float bodyx = (VERTEX.x + fish_length * 0.5) * (1.0 / fish_length);

	bodyz *= PI;
	bodyx *= PI;
	
	VERTEX.y += cos(time * time_scale + bodyz) * wave * up ;
	VERTEX.y += cos(time * time_scale + bodyx  ) * wave * up ;
	
	vec4 worldVert = WORLD_MATRIX * vec4(VERTEX, 1.0);
	float worldz = (worldVert.z + world_wave_length * 0.5) * (1.0 / world_wave_length);
	float worldx = (worldVert.x + world_wave_length * 0.5) * (1.0 / world_wave_length);
	worldz *= PI;
	worldx *= PI;

	VERTEX.y += cos(time * world_wave_time_scale + worldz) * world_wave_amp * up;
	VERTEX.y += cos(time * world_wave_time_scale + worldx) * world_wave_amp * up;
}"
