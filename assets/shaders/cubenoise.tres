[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded;

const float pi = 3.1415926536;

uniform int index : hint_range(0,6);

float hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }
float vechash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }

float noise(vec3 x) {
	const vec3 step = vec3(110, 241, 171);

	vec3 i = floor(x);
	vec3 f = fract(x);
 
	// For performance, compute the base input to a 1D hash from the integer part of the argument and the
	// incremental change to the 1D based on the 3D -> 1D wrapping
	float n = dot(i, step);

	vec3 u = f * f * (3.0 - 2.0 * f);
	return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
               	mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
           	mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
               	mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}

vec3 convert_cube_uv_to_xyz(int ind, float u, float v)
{
  float x;
  float y;
  float z;
  // convert range 0 to 1 to -1 to 1
  float uc = 2.0f * u - 1.0f;
  float vc = 2.0f * v - 1.0f;
  switch (ind)
  {
	case 0: x =  1.0f; y =	vc; z =   -uc; break;    // POSITIVE X
	case 1: x = -1.0f; y =	vc; z =	uc; break;    // NEGATIVE X
	case 2: x =	uc; y =  1.0f; z =   -vc; break;    // POSITIVE Y
	case 3: x =	uc; y = -1.0f; z =	vc; break;    // NEGATIVE Y
	case 4: x =	uc; y =	vc; z =  1.0f; break;    // POSITIVE Z
	case 5: x =   -uc; y =	vc; z = -1.0f; break;    // NEGATIVE Z
  }
  return vec3(x,y,z);
}


void fragment( ) {
	vec2 iResolution = vec2(100.,1.);
	vec3 coord = convert_cube_uv_to_xyz(index, UV.x, UV.y);

    float v = noise(coord);

	ALBEDO.rgb = pow(v, 0.2) * 10.3 * normalize(vec3(v, coord.xy)) + vec3(v * sin(TIME) * 6.);
}
"
